<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SigStat.Common</name>
    </assembly>
    <members>
        <member name="T:SigStat.Common.Algorithms.Dtw">
            <summary>
            Dynamic Time Warping algorithm teszt comment 1
            </summary>
        </member>
        <member name="P:SigStat.Common.Algorithms.Dtw.ForwardPath">
            <summary>
            Gets the list of points representing the shortest path. teszt comment 2
            </summary>
        </member>
        <member name="M:SigStat.Common.Algorithms.Dtw.#ctor">
            <summary>
            Initialize the DTW algorithm with the default Euclidean distance method. teszt comment 3
            </summary>
        </member>
        <member name="M:SigStat.Common.Algorithms.Dtw.#ctor(System.Func{System.Double[],System.Double[],System.Double})">
            <summary>
            Initialize the DTW algorithm with given distance method. teszt comment 4
            </summary>
            <param name="distMethod">Accord.Math.Distance.*</param>
        </member>
        <member name="M:SigStat.Common.Algorithms.Dtw.Compute(System.Double[][],System.Double[][])">
            <summary>
            Generate shortest path between the two sequences.
            </summary>
            <returns>Cost of the path.</returns>
        </member>
        <member name="M:SigStat.Common.Algorithms.Dtw.Distance(System.Double[],System.Double[])">
            <summary>
            Calculates distance between two points.
            Distance method can be set in ctor.
            </summary>
            <param name="p1">Point 1</param>
            <param name="p2">Point 2</param>
            <returns>Distance between <paramref name="p1"/> and <paramref name="p2"/></returns>
        </member>
        <member name="T:SigStat.Common.Algorithms.HSCPThinningStep">
            <summary>
            HSCP thinning algorithm
            http://www.ppgia.pucpr.br/~facon/Afinamento/1987holt.pdf
            </summary>
        </member>
        <member name="P:SigStat.Common.Algorithms.HSCPThinningStep.ResultChanged">
            <summary>
            Gets whether the last <see cref="M:SigStat.Common.Algorithms.HSCPThinningStep.Scan(System.Boolean[0:,0:])"/> call was effective.
            </summary>
        </member>
        <member name="M:SigStat.Common.Algorithms.HSCPThinningStep.Scan(System.Boolean[0:,0:])">
            <summary>
            Does one step of the thinning. Call it iteratively while ResultChanged.
            </summary>
            <param name="b">Binary raster.</param>
            <returns>Thinned binary raster.</returns>
        </member>
        <member name="M:SigStat.Common.Algorithms.HSCPThinningStep.Neighbourhood(System.Boolean[0:,0:],System.Int32,System.Int32)">
            <summary>
            Gets neighbour pixels in order.
            </summary>
        </member>
        <member name="T:SigStat.Common.Algorithms.OnePixelThinningStep">
            <summary>
            One pixel thinning algorithm.
            Use this after <see cref="T:SigStat.Common.Algorithms.HSCPThinningStep"/> to generate final skeleton.
            </summary>
        </member>
        <member name="P:SigStat.Common.Algorithms.OnePixelThinningStep.ResultChanged">
            <summary>
            Gets whether the last <see cref="M:SigStat.Common.Algorithms.OnePixelThinningStep.Scan(System.Boolean[0:,0:])"/> call was effective.
            </summary>
        </member>
        <member name="M:SigStat.Common.Algorithms.OnePixelThinningStep.Scan(System.Boolean[0:,0:])">
            <summary>
            Does one step of the thinning. Call it iteratively while ResultChanged.
            Scans the input matrix and generates a 1-pixel thinned version.
            </summary>
            <param name="binaryImage">Binary raster.</param>
            <returns>Thinned binary raster.</returns>
        </member>
        <member name="T:SigStat.Common.Algorithms.PatternMatching3x3">
            <summary>
            Binary 3x3 pattern matcher with rotating option.
            </summary>
        </member>
        <member name="M:SigStat.Common.Algorithms.PatternMatching3x3.#ctor(System.Nullable{System.Boolean}[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Algorithms.PatternMatching3x3"/> class with given pattern.
            </summary>
            <param name="pattern">3x3 pattern. null: don't care.</param>
        </member>
        <member name="M:SigStat.Common.Algorithms.PatternMatching3x3.Match(System.Boolean[0:,0:])">
            <summary>
            Match the 3x3 input with the 3x3 pattern.
            </summary>
            <param name="input"></param>
            <returns>True if the pattern matches.</returns>
        </member>
        <member name="M:SigStat.Common.Algorithms.PatternMatching3x3.RotMatch(System.Boolean[0:,0:])">
            <summary>
            Match the 3x3 input with the 3x3 pattern from all 4 directions.
            </summary>
            <param name="input"></param>
            <returns>True if the pattern matches from at least one direction.</returns>
        </member>
        <member name="M:SigStat.Common.Algorithms.PatternMatching3x3.Rotate(System.Nullable{System.Boolean}[0:,0:])">
            <summary>
            Rotate a 3x3 pattern by 90d.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.Features">
            <summary>
            Standard set of features.
            </summary>
        </member>
        <member name="M:SigStat.Common.ArrayExtension.ForEach``1(``0[],System.Action{``0})">
            <summary>
            Performs a given action on all items of the array and returns the original array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.Helpers.ILogger">
            <summary>
            Enables logging by exposing a <see cref="T:SigStat.Common.Helpers.Logger"/> property.
            </summary>
        </member>
        <member name="P:SigStat.Common.Helpers.ILogger.Logger">
            <summary>
            Gets or sets the attached <see cref="T:SigStat.Common.Helpers.Logger"/> object used to log messages.
            </summary>
        </member>
        <member name="T:SigStat.Common.Helpers.IProgress">
            <summary>
            Enables progress tracking by expsoing the <see cref="P:SigStat.Common.Helpers.IProgress.Progress"/> property and the <see cref="E:SigStat.Common.Helpers.IProgress.ProgressChanged"/> event.
            </summary>
        </member>
        <member name="E:SigStat.Common.Helpers.IProgress.ProgressChanged">
            <summary>
            Invoked whenever the <see cref="P:SigStat.Common.Helpers.IProgress.Progress"/> property is changed.
            </summary>
        </member>
        <member name="P:SigStat.Common.Helpers.IProgress.Progress">
            <summary>
            Gets the current progress in percentage.
            </summary>
        </member>
        <member name="T:SigStat.Common.Helpers.Logger">
            <summary>
            A easy-to-use class to log pipeline messages, complete with filtering levels and multi-thread support.
            </summary>
            <remarks>
            <list type="bullet">
            <item>A producer-consumer pattern is implemented with a concurrent queue to support multi-threaded pipelines.</item>
            <item>Holding the StreamWriter open is more efficient than repeatedly opening and closing it.</item>
            </list>
            </remarks>
            <example>
            <code>
            Logger l1 = new Logger(LogLevel.Info);
            Logger.Warn(this, "Training on non-genuine signature.");
            </code>
            </example>
        </member>
        <member name="P:SigStat.Common.Helpers.Logger.StoreEntries">
            <summary>
            Enable or disable the storing of log entries. This can come useful for filtering by certain type of entries.
            </summary>
        </member>
        <member name="F:SigStat.Common.Helpers.Logger.Entries">
            <summary>
            A list where Entries are stored if <see cref="P:SigStat.Common.Helpers.Logger.StoreEntries"/> is enabled.
            </summary>
        </member>
        <member name="F:SigStat.Common.Helpers.Logger.FilteringLevel">
            <summary>
            Gets or sets the filtering level. Entries above this level will be ignored.
            </summary>
        </member>
        <member name="M:SigStat.Common.Helpers.Logger.#ctor(SigStat.Common.Helpers.LogLevel,System.IO.Stream,System.Action{SigStat.Common.Helpers.LogLevel,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Helpers.Logger"/> class.
            </summary>
            <param name="filteringLevel">Entries above this level will be ignored.</param>
            <param name="outputStream">A stream to write consumed entries to. For example a FileStream pointing to the log archives.</param>
            <param name="outputAction">An action to perform when an entry is consumed. Use this for instant gui display of messages.</param>
        </member>
        <member name="M:SigStat.Common.Helpers.Logger.#ctor(SigStat.Common.Helpers.LogLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Helpers.Logger"/> class, and rewire the default Console IO.
            </summary>
            <param name="filteringLevel">Entries above this level will be ignored.</param>
        </member>
        <member name="M:SigStat.Common.Helpers.Logger.Fatal(System.Object,System.String)">
            <summary>
            Enqueue a fatal level log entry.
            </summary>
            <param name="sender">The object who sent the log. Usually provide [this].</param>
            <param name="message">Main content of the log entry.</param>
        </member>
        <member name="M:SigStat.Common.Helpers.Logger.Error(System.Object,System.String)">
            <summary>
            Enqueue an error level log entry.
            </summary>
            <param name="sender">The object who sent the log. Usually provide [this].</param>
            <param name="message">Main content of the log entry.</param>
        </member>
        <member name="M:SigStat.Common.Helpers.Logger.Warn(System.Object,System.String)">
            <summary>
            Enqueue a warning level log entry.
            </summary>
            <param name="sender">The object who sent the log. Usually provide [this].</param>
            <param name="message">Main content of the log entry.</param>
        </member>
        <member name="M:SigStat.Common.Helpers.Logger.Info(System.Object,System.String)">
            <summary>
            Enqueue an information level log entry.
            </summary>
            <param name="sender">The object who sent the log. Usually provide [this].</param>
            <param name="message">Main content of the log entry.</param>
        </member>
        <member name="M:SigStat.Common.Helpers.Logger.Debug(System.Object,System.String)">
            <summary>
            Enqueue a debug level log entry.
            </summary>
            <param name="sender">The object who sent the log. Usually provide [this].</param>
            <param name="message">Main content of the log entry.</param>
        </member>
        <member name="M:SigStat.Common.Helpers.Logger.EnqueueEntry(SigStat.Common.Helpers.LogLevel,System.Object,System.String)">
            <summary>
            Enqueue a new log entry with specified level. The entry is filtered through <see cref="F:SigStat.Common.Helpers.Logger.FilteringLevel"/>.
            </summary>
            <param name="messageLevel">Log level of the entry.</param>
            <param name="sender">The object who sent the log. Usually provide [this].</param>
            <param name="message">Main content of the log entry.</param>
        </member>
        <member name="M:SigStat.Common.Helpers.Logger.Stop">
            <summary>
            Stop accepting entries, flush the queue and stop the consuming thread.
            </summary>
        </member>
        <member name="T:SigStat.Common.Helpers.LogLevel">
            <summary>
            Represents the level of log.
            Lowest level: Off.
            Highest level: Debug.
            </summary>
        </member>
        <member name="F:SigStat.Common.Helpers.LogLevel.Off">
            <summary>Completely turn off logging.</summary>
        </member>
        <member name="F:SigStat.Common.Helpers.LogLevel.Fatal">
            <summary>Represents a fatal error level log.</summary>
        </member>
        <member name="F:SigStat.Common.Helpers.LogLevel.Error">
            <summary>Represents an error level log.</summary>
        </member>
        <member name="F:SigStat.Common.Helpers.LogLevel.Warn">
            <summary>Represents a warning level log.</summary>
        </member>
        <member name="F:SigStat.Common.Helpers.LogLevel.Info">
            <summary>Represents an information level log.</summary>
        </member>
        <member name="F:SigStat.Common.Helpers.LogLevel.Debug">
            <summary>Represents a debug level log.</summary>
        </member>
        <member name="T:SigStat.Common.Helpers.LogEntry">
            <summary>
            Represents a single entry of the log, consisting of a timestamp, a level, a sender and the message.
            </summary>
        </member>
        <member name="F:SigStat.Common.Helpers.LogEntry.Timestamp">
            <summary>Exact date and time of the entry's creation.</summary>
        </member>
        <member name="F:SigStat.Common.Helpers.LogEntry.Level">
            <summary>Log level of the entry.</summary>
        </member>
        <member name="F:SigStat.Common.Helpers.LogEntry.Sender">
            <summary>Reference of the object that created the entry.</summary>
        </member>
        <member name="F:SigStat.Common.Helpers.LogEntry.Message">
            <summary>Main content of the entry.</summary>
        </member>
        <member name="M:SigStat.Common.Helpers.LogEntry.#ctor(System.DateTime,SigStat.Common.Helpers.LogLevel,System.Object,System.String)">
            <remark>
            The constructor is internal, as only the <see cref="T:SigStat.Common.Helpers.Logger"/> may create new entries.
            </remark>
        </member>
        <member name="M:SigStat.Common.Helpers.LogEntry.ToString">
            <summary>
            Format the contained data to string, divided by tab characters.
            Use this to display the entry in the console.
            </summary>
            <returns>String result.</returns>
        </member>
        <member name="M:SigStat.Common.MathHelper.Min(System.Double,System.Double,System.Double)">
            <summary>
            Returns the smallest of the three double parameters
            </summary>
            <param name="d1"></param>
            <param name="d2"></param>
            <param name="d3"></param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Matrix.Invert(System.Boolean[0:,0:])">
            <summary>
            returns a copy of the array with inverted values
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Matrix.Neighbours``1(``0[0:,0:],``0)">
            <summary>
            returns a same sized matrix with each item showing the neighbour count for the given position.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Matrix.FromTableRows``1(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Int32,System.Int32)">
            <summary>
            Egy DataRow gyüjteményt átalakít egy kétdimenziós tömbbé. 
            Az átalakítás során ignoreColumns oszlopot és ignoreRows sort
            figyelmen kívül hagy.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rows"></param>
            <param name="ignoreColumns"></param>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.Loaders.DataSetLoader">
            <summary>
            Abstract loader class to inherit from. Implements ILogger.
            </summary>
        </member>
        <member name="P:SigStat.Common.Loaders.DataSetLoader.Logger">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Loaders.DataSetLoader.Log(SigStat.Common.Helpers.LogLevel,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Loaders.DataSetLoader.EnumerateSigners(System.Predicate{SigStat.Common.Signer})">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Loaders.IDataSetLoader">
            <summary>
            Exposes a function to enable loading collections of <see cref="T:SigStat.Common.Signer"/>s.
            Base abstract class: <see cref="T:SigStat.Common.Loaders.DataSetLoader"/>.
            </summary>
        </member>
        <member name="M:SigStat.Common.Loaders.IDataSetLoader.EnumerateSigners(System.Predicate{SigStat.Common.Signer})">
            <summary>
            Loads the database and returns the collection of <see cref="T:SigStat.Common.Signer"/>s that match the <paramref name="signerFilter"/>.
            </summary>
            <param name="signerFilter">Filter to specify which Signers to load. Example: (p=>p=="01")</param>
            <returns>Collection of <see cref="T:SigStat.Common.Signer"/>s that match the <paramref name="signerFilter"/></returns>
        </member>
        <member name="T:SigStat.Common.Loaders.ImageLoader">
            <summary>
            DataSetLoader for Image type databases.
            Similar format to Svc2004Loader, but finds png images.
            </summary>
        </member>
        <member name="M:SigStat.Common.Loaders.ImageLoader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Loaders.ImageLoader"/> class with specified database.
            </summary>
            <param name="databasePath">File path to the database.</param>
        </member>
        <member name="M:SigStat.Common.Loaders.ImageLoader.EnumerateSigners(System.Predicate{SigStat.Common.Signer})">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Loaders.ImageLoader.LoadSignature(SigStat.Common.Signature,System.String)">
            <summary>
            Load one image.
            </summary>
            <param name="signature">The signature that receives the new <see cref="F:SigStat.Common.Features.Image"/></param>
            <param name="file">File path to the image to be loaded.</param>
        </member>
        <member name="T:SigStat.Common.Loaders.ImageSaver">
            <summary>
            Get the <see cref="F:SigStat.Common.Features.Image"/> of a <see cref="T:SigStat.Common.Signature"/> and save it as png file.
            </summary>
        </member>
        <member name="M:SigStat.Common.Loaders.ImageSaver.Save(SigStat.Common.Signature,System.String)">
            <summary>
            Saves a png image file to the specified <paramref name="path"/>.
            </summary>
            <param name="signature">Input signature containing <see cref="F:SigStat.Common.Features.Image"/>.</param>
            <param name="path">Output file path of the png image.</param>
        </member>
        <member name="T:SigStat.Common.Loaders.Svc2004">
            <summary>
            Set of features containing raw data loaded from SVC2004-format database.
            </summary>
        </member>
        <member name="T:SigStat.Common.Loaders.Svc2004Loader">
            <summary>
            Loads SVC2004-format database from .zip
            </summary>
        </member>
        <member name="M:SigStat.Common.Loaders.Svc2004Loader.#ctor(System.String,System.Boolean,System.Predicate{SigStat.Common.Signer})">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Loaders.Svc2004Loader"/> class with specified database.
            </summary>
            <param name="databasePath">File path to a .zip file containing Svc2004 signatures.</param>
            <param name="standardFeatures">Convert loaded data to standard <see cref="T:SigStat.Common.Features"/>.</param>
            <param name="signerFilter"></param>
        </member>
        <member name="M:SigStat.Common.Loaders.Svc2004Loader.EnumerateSigners(System.Predicate{SigStat.Common.Signer})">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Loaders.Svc2004Loader.LoadSignature(SigStat.Common.Signature,System.String,System.Boolean)">
            <summary>
            Loads one signature from specified file path.
            </summary>
            <param name="signature">Signature to write features to.</param>
            <param name="path">Path to a file of format "U*S*.txt"</param>
            <param name="standardFeatures">Convert loaded data to standard <see cref="T:SigStat.Common.Features"/>.</param>
        </member>
        <member name="M:SigStat.Common.Loaders.Svc2004Loader.LoadSignature(SigStat.Common.Signature,System.IO.Stream,System.Boolean)">
            <summary>
            Loads one signature from specified stream.
            </summary>
            <param name="signature">Signature to write features to.</param>
            <param name="stream">Stream to read svc2004 data from.</param>
            <param name="standardFeatures">Convert loaded data to standard <see cref="T:SigStat.Common.Features"/>.</param>
        </member>
        <member name="T:SigStat.Common.Model.ApproximateLimit">
            <summary>
            Used to approximate the classification limit in the training process.
            </summary>
        </member>
        <member name="M:SigStat.Common.Model.ApproximateLimit.#ctor(SigStat.Common.IClassification)">
            <summary>
            Initialize a new instance of the <see cref="T:SigStat.Common.Model.ApproximateLimit"/> class.
            </summary>
            <param name="pipeline">The classification pipeline to be used for calculation.</param>
        </member>
        <member name="M:SigStat.Common.Model.ApproximateLimit.Calculate(System.Collections.Generic.List{SigStat.Common.Signature})">
            <summary>
            Calculate the limit by pairing each signature.
            Limit = AverageCost + StdDeviation.
            </summary>
            <param name="sigs">List of genuine signatures</param>
            <returns>Approximate limit.</returns>
        </member>
        <member name="T:SigStat.Common.Model.Sampler">
            <summary>
            Takes samples from a set of <see cref="T:SigStat.Common.Signature"/>s by given sampling strategies.
            Use this to fine-tune the <see cref="T:SigStat.Common.Model.VerifierBenchmark"/>
            </summary>
        </member>
        <member name="M:SigStat.Common.Model.Sampler.#ctor(SigStat.Common.Model.Sampler)">
            <summary>
            Initialize a new instance of the <see cref="T:SigStat.Common.Model.Sampler"/> class based on the <paramref name="s"/> parameter's strategy.
            </summary>
            <param name="s">A Sampler to copy.</param>
        </member>
        <member name="M:SigStat.Common.Model.Sampler.#ctor(System.Func{System.Collections.Generic.List{SigStat.Common.Signature},System.Collections.Generic.List{SigStat.Common.Signature}},System.Func{System.Collections.Generic.List{SigStat.Common.Signature},System.Collections.Generic.List{SigStat.Common.Signature}},System.Func{System.Collections.Generic.List{SigStat.Common.Signature},System.Collections.Generic.List{SigStat.Common.Signature}})">
            <summary>
            Initialize a new instance of the <see cref="T:SigStat.Common.Model.Sampler"/> class by given sampling strategies.
            </summary>
            <param name="references">Strategy to sample genuine signatures to be used for training.</param>
            <param name="genuineTests">Strategy to sample genuine signatures to be used for testing.</param>
            <param name="forgeryTests">Strategy to sample forged signatures to be used for testing.</param>
        </member>
        <member name="M:SigStat.Common.Model.Sampler.Init(SigStat.Common.Signer)">
            <summary>
            Initialize the Sampler with a Signer's Signatures.
            </summary>
            <param name="s">Signer to sample Signatures from.</param>
        </member>
        <member name="M:SigStat.Common.Model.Sampler.Init(System.Collections.Generic.List{SigStat.Common.Signature})">
            <summary>
            Initialize the Sampler with a list of Signatures.
            </summary>
            <param name="s">List of Signatures to take samples from.</param>
        </member>
        <member name="M:SigStat.Common.Model.Sampler.SampleReferences">
            <summary>
            Samples a batch of genuine reference signatures to train on.
            </summary>
            <returns>Genuine reference signatures to train on.</returns>
        </member>
        <member name="M:SigStat.Common.Model.Sampler.SampleGenuineTests">
            <summary>
            Samples a batch of genuine signatures to test on.
            </summary>
            <returns>Genuine signatures to test on.</returns>
        </member>
        <member name="M:SigStat.Common.Model.Sampler.SampleForgeryTests">
            <summary>
            Samples a batch of forged signatures to test on.
            </summary>
            <returns>Forged signatures to test on.</returns>
        </member>
        <member name="P:SigStat.Common.Model.Sampler.BasicSampler">
            <summary>
            Default sampler for SVC2004 database.
            10 references, 10 genuine tests, 10 forged tests
            </summary>
        </member>
        <member name="T:SigStat.Common.Model.Result">
            <summary>Contains the benchmark results of a single <see cref="T:SigStat.Common.Signer"/></summary>
        </member>
        <member name="F:SigStat.Common.Model.Result.Signer">
            <summary>Identifier of the <see cref="F:SigStat.Common.Model.Result.Signer"/></summary>
        </member>
        <member name="F:SigStat.Common.Model.Result.Frr">
            <summary>False Rejection Rate</summary>
        </member>
        <member name="F:SigStat.Common.Model.Result.Far">
            <summary>False Acceptance Rate</summary>
        </member>
        <member name="F:SigStat.Common.Model.Result.Aer">
            <summary>Average Error Rate</summary>
        </member>
        <member name="T:SigStat.Common.Model.BenchmarkResults">
            <summary>Contains the benchmark results of every <see cref="T:SigStat.Common.Signer"/> and the summarized final results.</summary>
        </member>
        <member name="F:SigStat.Common.Model.BenchmarkResults.SignerResults">
            <summary>List that contains the <see cref="T:SigStat.Common.Model.Result"/>s for each <see cref="T:SigStat.Common.Signer"/></summary>
        </member>
        <member name="F:SigStat.Common.Model.BenchmarkResults.FinalResult">
            <summary>Summarized, final result of the benchmark execution.</summary>
        </member>
        <member name="T:SigStat.Common.Model.VerifierBenchmark">
            <summary> Benchmarking class to test error rates of a <see cref="T:SigStat.Common.Model.Verifier"/> </summary>
        </member>
        <member name="F:SigStat.Common.Model.VerifierBenchmark.Loader">
            <summary> The loader to take care of <see cref="T:SigStat.Common.Signature"/> database loading. </summary>
        </member>
        <member name="F:SigStat.Common.Model.VerifierBenchmark.Sampler">
            <summary> Defines the sampling strategy for the benchmark. </summary>
        </member>
        <member name="P:SigStat.Common.Model.VerifierBenchmark.Verifier">
            <summary> Gets or sets the <see cref="T:SigStat.Common.Model.Verifier"/> to be benchmarked. </summary>
        </member>
        <member name="P:SigStat.Common.Model.VerifierBenchmark.Logger">
            <summary> Gets or sets the attached <see cref="T:SigStat.Common.Helpers.Logger"/> object used to log messages. Hands it over to the verifier. </summary>
        </member>
        <member name="P:SigStat.Common.Model.VerifierBenchmark.Progress">
            <inheritdoc/>
        </member>
        <member name="E:SigStat.Common.Model.VerifierBenchmark.ProgressChanged">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Model.VerifierBenchmark.Log(SigStat.Common.Helpers.LogLevel,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Model.VerifierBenchmark.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Model.VerifierBenchmark"/> class.
            Sets the <see cref="T:SigStat.Common.Model.Verifier"/> to be the <see cref="P:SigStat.Common.Model.Verifier.BasicVerifier"/>.
            Sets the <see cref="T:SigStat.Common.Model.Sampler"/> to be the <see cref="P:SigStat.Common.Model.Sampler.BasicSampler"/>.
            </summary>
        </member>
        <member name="M:SigStat.Common.Model.VerifierBenchmark.ExecuteAsync">
            <summary>
            Asynchronously execute the benchmarking process.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Model.VerifierBenchmark.Execute">
            <summary>
            Synchronously execute the benchmarking process.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Model.VerifierBenchmark.ExecuteParallel">
            <summary>
            Parallel execute the benchmarking process.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.Model.Verifier">
            <summary>
            Uses pipelines to transform, train on, and classify <see cref="T:SigStat.Common.Signature"/> objects.
            </summary>
        </member>
        <member name="P:SigStat.Common.Model.Verifier.TransformPipeline">
            <summary> Gets or sets the transform pipeline. Hands over the Logger object. </summary>
        </member>
        <member name="P:SigStat.Common.Model.Verifier.ClassifierPipeline">
            <summary>  Gets or sets the classifier pipeline. Hands over the Logger object. </summary>
        </member>
        <member name="P:SigStat.Common.Model.Verifier.Logger">
            <summary> Gets or sets the attached <see cref="T:SigStat.Common.Helpers.Logger"/> object used to log messages. Hands it over to the pipelines. </summary>
        </member>
        <member name="M:SigStat.Common.Model.Verifier.Log(SigStat.Common.Helpers.LogLevel,System.String)">
            <summary>
            Enqueues a new log entry to be consumed by the attached <see cref="T:SigStat.Common.Helpers.Logger"/>. Use this when developing new pipeline items.
            </summary>
            <param name="level">Specifies the level of the entry. Higher levels than the <see cref="T:SigStat.Common.Helpers.Logger"/>'s filter level will be ignored.</param>
            <param name="message">The main content of the log entry.</param>
        </member>
        <member name="P:SigStat.Common.Model.Verifier.Progress">
            <inheritdoc/>
        </member>
        <member name="E:SigStat.Common.Model.Verifier.ProgressChanged">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Model.Verifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Model.Verifier"/> class, with empty pipelines and no <see cref="T:SigStat.Common.Helpers.Logger"/>.
            </summary>
        </member>
        <member name="M:SigStat.Common.Model.Verifier.#ctor(SigStat.Common.Model.Verifier)">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Model.Verifier"/> class with the properties of <paramref name="v"/>.
            </summary>
            <param name="v">An instance of the <see cref="T:SigStat.Common.Model.Verifier"/> class.</param>
        </member>
        <member name="M:SigStat.Common.Model.Verifier.Train(SigStat.Common.Signer)">
            <summary>
            Trains the verifier with <see cref="P:SigStat.Common.Signer.Signatures"/> having <see cref="F:SigStat.Common.Origin.Genuine"/> property.
            </summary>
            <param name="signer">The signer with genuine signatures.</param>
        </member>
        <member name="M:SigStat.Common.Model.Verifier.Train(System.Collections.Generic.List{SigStat.Common.Signature})">
            <summary>
            Trains the verifier with a list of signatures. Uses the <see cref="P:SigStat.Common.Model.Verifier.TransformPipeline"/> to extract features,
            and <see cref="P:SigStat.Common.Model.Verifier.ClassifierPipeline"/> to find an optimized limit.
            </summary>
            <param name="sigs">The list of signatures to train on.</param>
        </member>
        <member name="M:SigStat.Common.Model.Verifier.Test(SigStat.Common.Signature)">
            <summary>
            Verifies the genuinity of <paramref name="sig"/>.
            </summary>
            <param name="sig"></param>
            <returns>True if <paramref name="sig"/> passes the verification test.</returns>
        </member>
        <member name="P:SigStat.Common.Model.Verifier.BasicVerifier">
            <summary>
            Basic <see cref="T:SigStat.Common.Model.Verifier"/> model with DTW classification of tangent features.
            </summary>
        </member>
        <member name="T:SigStat.Common.FeatureDescriptor">
            <summary>
            Represents a feature with name and type.
            </summary>
        </member>
        <member name="P:SigStat.Common.FeatureDescriptor.Name">
            <summary> Gets or sets the name of the feature. </summary>
        </member>
        <member name="P:SigStat.Common.FeatureDescriptor.Key">
            <summary> Gets or sets the key of the feature. </summary>
        </member>
        <member name="P:SigStat.Common.FeatureDescriptor.FeatureType">
            <summary> Gets or sets the type of the feature. </summary>
        </member>
        <member name="P:SigStat.Common.FeatureDescriptor.IsCollection">
            <summary> Gets whether the type of the feature is List. </summary>
        </member>
        <member name="F:SigStat.Common.FeatureDescriptor.descriptors">
            <summary> The static dictionary of all descriptors. </summary>
        </member>
        <member name="M:SigStat.Common.FeatureDescriptor.#ctor(System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.FeatureDescriptor"/> class, and adds it to the static <see cref="F:SigStat.Common.FeatureDescriptor.descriptors"/>.
            Therefore, the <paramref name="key"/> parameter must be unique.
            </summary>
            <param name="name"></param>
            <param name="key"></param>
            <param name="featureType"></param>
        </member>
        <member name="M:SigStat.Common.FeatureDescriptor.GetDescriptor(System.String)">
            <summary>
            Gets the <see cref="T:SigStat.Common.FeatureDescriptor"/> specified by <paramref name="key"/>.
            Throws error if key not found.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.FeatureDescriptor`1">
            <summary>
            Represents a feature with the type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Type of the feature.</typeparam>
        </member>
        <member name="M:SigStat.Common.FeatureDescriptor`1.Descriptor(System.String)">
            <summary>
            Get the <see cref="T:SigStat.Common.FeatureDescriptor`1"/> of <paramref name="key"/>.
            If the key is not used yet, create one.
            This is the preferred way.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.Origin">
            <summary>Represents our knowledge on the origin of a signature. </summary>
        </member>
        <member name="F:SigStat.Common.Origin.Unknown">
            <summary>Use this in practice before a signature is verified. </summary>
        </member>
        <member name="F:SigStat.Common.Origin.Genuine">
            <summary>The <see cref="T:SigStat.Common.Signature"/>'s origin is verified to be from <see cref="P:SigStat.Common.Signature.Signer"/></summary>
        </member>
        <member name="F:SigStat.Common.Origin.Forged">
            <summary>The <see cref="T:SigStat.Common.Signature"/> is a forgery.</summary>
        </member>
        <member name="T:SigStat.Common.Signature">
            <summary>
            Represents a signature as a collection of features, containing the data that flows in the pipeline.
            </summary>
        </member>
        <member name="P:SigStat.Common.Signature.ID">
            <summary>An identifier for the Signature. Keep it unique to be useful for logs. </summary>
        </member>
        <member name="P:SigStat.Common.Signature.Origin">
            <summary>Represents our knowledge on the origin of the signature. <see cref="F:SigStat.Common.Origin.Unknown"/> may be used in practice before it is verified.</summary>
        </member>
        <member name="P:SigStat.Common.Signature.Signer">
            <summary>A reference to the <see cref="T:SigStat.Common.Signer"/> who this signature belongs to. (The origin is not constrained to be genuine.)</summary>
        </member>
        <member name="P:SigStat.Common.Signature.Item(System.String)">
            <summary>
            Gets or sets the specified feature.
            </summary>
            <param name="featureKey"></param>
            <returns>The feature object without cast.</returns>
        </member>
        <member name="P:SigStat.Common.Signature.Item(SigStat.Common.FeatureDescriptor)">
            <summary>
            Gets or sets the specified feature.
            </summary>
            <param name="featureDescriptor"></param>
            <returns>The feature object without cast.</returns>
        </member>
        <member name="M:SigStat.Common.Signature.GetFeature``1(System.String)">
            <summary>
            Gets the specified feature.
            </summary>
            <param name="featureKey"></param>
            <returns>The casted feature object</returns>
        </member>
        <member name="M:SigStat.Common.Signature.GetFeature``1(SigStat.Common.FeatureDescriptor{``0})">
            <summary>
            Gets the specified feature. This is the preferred way.
            </summary>
            <param name="featureDescriptor"></param>
            <returns>The casted feature object</returns>
        </member>
        <member name="M:SigStat.Common.Signature.GetFeature``1(SigStat.Common.FeatureDescriptor)">
            <summary>
            Gets the specified feature. This is the preferred way.
            </summary>
            <param name="featureDescriptor"></param>
            <returns>The casted feature object</returns>
        </member>
        <member name="M:SigStat.Common.Signature.GetFeatureDescriptors">
            <summary>
            Gets a collection of <see cref="T:SigStat.Common.FeatureDescriptor"/>s that are used in this signature.
            </summary>
            <returns>A collection of <see cref="T:SigStat.Common.FeatureDescriptor"/>s.</returns>
        </member>
        <member name="M:SigStat.Common.Signature.SetFeature``1(SigStat.Common.FeatureDescriptor,``0)">
            <summary>
            Sets the specified feature. This is the preferred way.
            </summary>
            <param name="featureDescriptor">The feature to put the new value in.</param>
            <param name="feature">The value to set.</param>
        </member>
        <member name="M:SigStat.Common.Signature.GetAggregateFeature(System.Collections.Generic.List{SigStat.Common.FeatureDescriptor})">
            <summary>
            Aggregate multiple features into one. Example: X, Y features -> P.xy feature.
            Use this for example at DTW algorithm input.
            </summary>
            <param name="fs">List of features to aggregate.</param>
            <returns>Aggregated feature value</returns>
        </member>
        <member name="T:SigStat.Common.Signer">
            <summary>
            Represents a person as a <see cref="P:SigStat.Common.Signer.ID"/> and a list of <see cref="P:SigStat.Common.Signer.Signatures"/>.
            </summary>
        </member>
        <member name="P:SigStat.Common.Signer.ID">
            <summary>
            An identifier for the Signer. Keep it unique to be useful for logs.
            </summary>
        </member>
        <member name="P:SigStat.Common.Signer.Signatures">
            <summary>
            List of signatures that belong to the signer. 
            (Their origin is not constrained to be genuine.)
            </summary>
        </member>
        <member name="T:SigStat.Common.Vector">
            <summary>
            
            </summary>
        </member>
        <member name="M:SigStat.Common.Vector.Equals(System.Object)">
            <summary>
            Két vektor akkor egyenlő, ha ugyanabból a pontból indulnak ki és ugyanabban az irányba
            mutatnak és hosszuk is megegyezik. 
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Vector.GetNormal">
            <summary>
            Elofrgatja a vektort 90 fokkal a kezdőpontja körül az óramutató járásával megegyező irányba
            </summary>
        </member>
        <member name="M:SigStat.Common.Vector.GetNormal(System.Double)">
            <summary>
            Elofrgatja a vektort 90 fokkal a kezdőpontja körül az óramutató járásával megegyező irányba
            </summary>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Classifiers.DTWClassifier">
            <summary>
            Classifies Signatures with the <see cref="T:SigStat.Common.Algorithms.Dtw"/> algorithm.
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.DTWClassifier.#ctor">
            <summary>Initializes a new instance of the <see cref="T:SigStat.Common.PipelineItems.Classifiers.DTWClassifier"/> class with the default Manhattan distance method.</summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.DTWClassifier.#ctor(System.Func{System.Double[],System.Double[],System.Double})">
            <summary>Initializes a new instance of the <see cref="T:SigStat.Common.PipelineItems.Classifiers.DTWClassifier"/> class with a specified distance method.</summary>
             <param name="distanceMethod">Accord.Math.Distance.*</param>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.DTWClassifier.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.DTWClassifier.Add(SigStat.Common.FeatureDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.DTWClassifier.Pair(SigStat.Common.Signature,SigStat.Common.Signature)">
            <summary>
            Aggregates the input features and executes the <see cref="T:SigStat.Common.Algorithms.Dtw"/> algorithm.
            </summary>
            <param name="signature1"></param>
            <param name="signature2"></param>
            <returns>Cost between <paramref name="signature1"/> and <paramref name="signature2"/></returns>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Classifiers.WeightedClassifier">
            <summary>
            Classifies Signatures by weighing other Classifier results.
            </summary>
        </member>
        <member name="F:SigStat.Common.PipelineItems.Classifiers.WeightedClassifier.Items">
            <summary>List of classifiers and belonging weights.</summary>
        </member>
        <member name="P:SigStat.Common.PipelineItems.Classifiers.WeightedClassifier.Logger">
            <summary>Gets or sets the Logger. Passes it to child Items as well.</summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.WeightedClassifier.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.WeightedClassifier.Add(System.ValueTuple{SigStat.Common.IClassification,System.Double})">
            <summary>Add a new classifier with given weight to the list of items.</summary>
            <param name="newItem">Classifier with belonging weight.</param>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Classifiers.WeightedClassifier.Pair(SigStat.Common.Signature,SigStat.Common.Signature)">
            <summary>
            Execute each classifier in the list and weigh returned costs.
            </summary>
            <param name="signature1"></param>
            <param name="signature2"></param>
            <returns>Weighted cost between <paramref name="signature1"/> and <paramref name="signature2"/></returns>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Markers.LogMarker">
            <summary>
            Logs the Pipeline Input. Useful for logging TimeMarker results.
            <para>Default Pipeline Output: -</para>
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Markers.LogMarker.#ctor(SigStat.Common.Helpers.LogLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.PipelineItems.Markers.LogMarker"/> class with specified log level.
            </summary>
            <param name="level">The level to log the message at.</param>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Markers.LogMarker.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Markers.TimeMarkerStart">
            <summary>
            Starts a timer to measure completion time of following transforms.
            <para>Default Pipeline Output: (<see cref="T:System.DateTime"/>) DefaultTimer</para>
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Markers.TimeMarkerStart.#ctor">
            <summary>Starts a timer to measure completion time of following transforms.</summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Markers.TimeMarkerStart.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.PipelineItems.Markers.TimeMarkerStop">
            <summary>
            Stops a timer to measure completion time of previous transforms.
            <para>Default Pipeline Output: (<see cref="T:System.DateTime"/>) DefaultTimer</para>
            </summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Markers.TimeMarkerStop.#ctor">
            <summary>Stops a timer to measure completion time of previous transforms.</summary>
        </member>
        <member name="M:SigStat.Common.PipelineItems.Markers.TimeMarkerStop.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.ComponentSorter">
            <summary>
            Sorts Component order by comparing each starting X value, and finding nearest components.
            <para>Default Pipeline Input: (bool[,]) Components</para>
            <para>Default Pipeline Output: (bool[,]) Components</para>
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.ComponentSorter.#ctor">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.ComponentSorter"/> class. </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.ComponentSorter.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Transforms.ComponentSorter.Distance(System.Collections.Generic.List{System.Drawing.PointF},System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
            Calculates distance between two components by comparing last and first points.
            Components that are left behind are in advantage.
            </summary>
        </member>
        <member name="T:SigStat.Common.Transforms.CentroidTranslate">
            <summary>
            Sequential pipeline to translate X and Y <see cref="T:SigStat.Common.Features"/> to Centroid.
            The following Transforms are called: <see cref="T:SigStat.Common.Transforms.CentroidExtraction"/>, <see cref="T:SigStat.Common.Transforms.Multiply"/>(-1), <see cref="T:SigStat.Common.Transforms.Translate"/>
            <para>Default Pipeline Input: <see cref="F:SigStat.Common.Features.X"/>, <see cref="F:SigStat.Common.Features.Y"/></para>
            <para>Default Pipeline Output: (List{double}) Centroid</para>
            </summary>
            <remarks>This is a special case of <see cref="T:SigStat.Common.Transforms.Translate"/></remarks>
        </member>
        <member name="M:SigStat.Common.Transforms.CentroidTranslate.#ctor">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.CentroidTranslate"/> class.</summary>
        </member>
        <member name="T:SigStat.Common.Transforms.TimeReset">
            <summary>
            Sequential pipeline to reset time values to begin at 0.
            The following Transforms are called: Extrema, Multiply, AddVector.
            <para>Default Pipeline Input: <see cref="F:SigStat.Common.Features.T"/></para>
            <para>Default Pipeline Output: <see cref="F:SigStat.Common.Features.T"/></para>
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.TimeReset.#ctor">
            <summary>Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.TimeReset"/> class.</summary>
        </member>
        <member name="T:SigStat.Common.Transforms.Translate">
            <summary>
            Sequential pipeline to translate X and Y <see cref="T:SigStat.Common.Features"/> by specified vector (constant or feature).
            The following Transforms are called: <see cref="T:SigStat.Common.Transforms.AddConst"/> twice, or <see cref="T:SigStat.Common.Transforms.AddVector"/>.
            <para>Default Pipeline Input: <see cref="F:SigStat.Common.Features.X"/>, <see cref="F:SigStat.Common.Features.Y"/></para>
            <para>Default Pipeline Output: <see cref="F:SigStat.Common.Features.X"/>, <see cref="F:SigStat.Common.Features.Y"/></para>
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.Translate.#ctor(System.Double,System.Double)">
            <param name="xAdd">Value to translate <see cref="F:SigStat.Common.Features.X"/> by.</param>
            <param name="yAdd">Value to translate <see cref="F:SigStat.Common.Features.Y"/> by.</param>
        </member>
        <member name="M:SigStat.Common.Transforms.Translate.#ctor(SigStat.Common.FeatureDescriptor{System.Collections.Generic.List{System.Double}})">
            <param name="vectorFeature">Feature to translate X and Y by.</param>
        </member>
        <member name="T:SigStat.Common.Transforms.ApproximateOnlineFeatures">
            <summary>
            init Pressure, Altitude, Azimuth features with default values.
            <para>Default Pipeline Output: Features.Pressure, Features.Altitude, Features.Azimuth</para>
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.ApproximateOnlineFeatures.#ctor">
            <summary>Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.ApproximateOnlineFeatures"/> class.</summary>
        </member>
        <member name="M:SigStat.Common.Transforms.ApproximateOnlineFeatures.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.CentroidExtraction">
            <summary>
            Extracts the Centroid (aka. Center Of Gravity) of the input features.
            <para> Default Pipeline Output: (List{double}) Centroid. </para>
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.CentroidExtraction.#ctor">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.CentroidExtraction"/> class. </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.CentroidExtraction.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Transforms.CentroidExtraction.Add(SigStat.Common.FeatureDescriptor{System.Collections.Generic.List{System.Double}})">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Transforms.CentroidExtraction.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.ComponentExtraction">
            <summary>
            Extracts unsorted components by tracing through the binary Skeleton raster.
            <para>Default Pipeline Input: (bool[,]) Skeleton, (List{Point}) EndPoints, (List{Point}) CrossingPoints</para>
            <para>Default Pipeline Output: (List{List{PointF}}) Components</para>
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.ComponentExtraction.#ctor(System.Int32)">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.ComponentExtraction"/> class with specified sampling resolution.</summary>
            <param name="samplingResolution">Steps to trace before a new point is sampled. Smaller values result in a more precise tracing. Provide a positive value.</param>
        </member>
        <member name="M:SigStat.Common.Transforms.ComponentExtraction.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Transforms.ComponentExtraction.SplitCrossings(System.Collections.Generic.List{System.Drawing.Point})">
            <summary>
            Unite crossingpoints into crossings (list of its endpoints), and
            split all crossings into neighbouring endpoints.
            </summary>
            <param name="crs">List of crossingpoints</param>
            <returns>List of crossings (1 crossing: List of endpoints)</returns>
        </member>
        <member name="M:SigStat.Common.Transforms.ComponentExtraction.Trace(System.Collections.Generic.List{System.Drawing.Point})">
            <summary>
            lekoveti a szakaszokat. Ebbe mar ne legyenek crossingpointok
            </summary>
            <param name="endPoints"></param>
            <returns>List of sections</returns>
        </member>
        <member name="T:SigStat.Common.Transforms.ComponentsToFeatures">
            <summary>
            Extracts standard <see cref="T:SigStat.Common.Features"/> from sorted Components.
            <para>Default Pipeline Input: (List{List{PointF}}) Components</para>
            <para>Default Pipeline Output: X, Y, Button <see cref="T:SigStat.Common.Features"/></para>
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.ComponentsToFeatures.#ctor">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.ComponentsToFeatures"/> class. </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.ComponentsToFeatures.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.EndpointExtraction">
            <summary>
            Extracts EndPoints and CrossingPoints from Skeleton.
            <para>Default Pipeline Input: (bool[,]) Skeleton</para>
            <para>Default Pipeline Output: (List{Point}) EndPoints, (List{Point}) CrossingPoints </para>
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.EndpointExtraction.#ctor">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.EndpointExtraction"/> class. </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.EndpointExtraction.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.TangentExtraction">
            <summary>
            Extracts tangent values of the standard X, Y <see cref="T:SigStat.Common.Features"/>
            <para>Default Pipeline Input: X, Y <see cref="T:SigStat.Common.Features"/></para>
            <para>Default Pipeline Output: (List{double})  Tangent </para>
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.TangentExtraction.#ctor">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.TangentExtraction"/> class. </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.TangentExtraction.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.AddConst">
            <summary>
            Adds a constant value to a feature. Works with collection features too.
            <para>Default Pipeline Output: Pipeline Input</para>
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.AddConst.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.AddConst"/> class with specified settings.
            </summary>
            <param name="value">The value to be added to the input feature.</param>
        </member>
        <member name="M:SigStat.Common.Transforms.AddConst.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.AddVector">
            <summary>
            Adds a vector feature's elements to other features.
            <para>Default Pipeline Output: Pipeline Input</para>
            </summary>
            <example>
            Inputs are: Centroid.xy, X, Y .
            Adds Centroid.x to each element of X.
            Adds Centroid.y to each element of Y.
            </example>
        </member>
        <member name="M:SigStat.Common.Transforms.AddVector.#ctor(SigStat.Common.FeatureDescriptor{System.Collections.Generic.List{System.Double}})">
            <summary>
            Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.AddVector"/> class with a vector feature.
            Don't forget to add as many Inputs as the vector's dimension.
            </summary>
            <param name="vectorFeature">A collection-type feature where each element represents a dimension of the vector.</param>
        </member>
        <member name="M:SigStat.Common.Transforms.AddVector.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.Extrema">
            <summary>
            Extracts minimum and maximum values of given feature.
            <para>Default Pipeline Output: (List{double}) Min, (List{double}) Max </para>
            </summary>
            <remarks>
            Output features are lists, containing only one value each.
            </remarks>
        </member>
        <member name="M:SigStat.Common.Transforms.Extrema.#ctor">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.Extrema"/> class. </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.Extrema.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.Map">
            <summary>
            Maps values of a feature to a specified range.
            <para>Pipeline Input type: List{double}</para>
            <para>Default Pipeline Output: (List{double}) MapResult</para>
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.Map.#ctor(System.Double,System.Double)">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.Map"/> class with specified settings. </summary>
            <param name="minVal">New minimum value.</param>
            <param name="maxVal">New maximum value.</param>
        </member>
        <member name="M:SigStat.Common.Transforms.Map.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.Multiply">
            <summary>
            Multiplies the values of a feature with a given constant.
            <para>Pipeline Input type: List{double}</para>
            <para>Default Pipeline Output: (List{double}) Input</para>
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.Multiply.#ctor(System.Double)">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.Multiply"/> class with specified settings. </summary>
            <param name="byConst">The value to multiply the input feature by.</param>
        </member>
        <member name="M:SigStat.Common.Transforms.Multiply.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Transforms.Multiply.Add(SigStat.Common.FeatureDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Transforms.Multiply.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.Normalize">
            <summary>
            Maps values of a feature to 0.0 - 1.0 range.
            <para>Pipeline Input type: List{double}</para>
            <para>Default Pipeline Output: (List{double}) NormalizationResult</para>
            </summary>
            <remarks> This is a specific case of the <see cref="T:SigStat.Common.Transforms.Map"/> transform. </remarks>
        </member>
        <member name="M:SigStat.Common.Transforms.Normalize.#ctor">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.Map"/> class with specified settings. </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.Normalize.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.Binarization">
            <summary>
            Generates a binary raster version of the input image with the iterative threshold method.
            <para>Pipeline Input type: Image{Rgba32}</para>
            <para>Default Pipeline Output: (bool[,]) Binarized</para>
            </summary>
        </member>
        <member name="T:SigStat.Common.Transforms.Binarization.ForegroundType">
            <summary> Represents the type of the input image. </summary>
        </member>
        <member name="F:SigStat.Common.Transforms.Binarization.ForegroundType.Dark">
            <summary> (default) Foreground is darker than background. (eg. ink on paper) </summary>
        </member>
        <member name="F:SigStat.Common.Transforms.Binarization.ForegroundType.Bright">
            <summary> Foreground is brighter than background. (for non-signature images) </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.Binarization.#ctor">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.Binarization"/> class with default settings: Iterative threshold and <see cref="F:SigStat.Common.Transforms.Binarization.ForegroundType.Dark"/>. </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.Binarization.#ctor(SigStat.Common.Transforms.Binarization.ForegroundType,System.Nullable{System.Double})">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.Binarization"/> class with specified settings. </summary>
            <param name="foregroundType"></param>
            <param name="binThreshold">Use this threshold value instead of iteratively calculating it. Range from 0 to 1</param>
        </member>
        <member name="M:SigStat.Common.Transforms.Binarization.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Transforms.Binarization.IterativeThreshold(SixLabors.ImageSharp.Image{SixLabors.ImageSharp.PixelFormats.Rgba32},System.Double)">
            <summary>
            http://accord-framework.net/docs/html/T_Accord_Imaging_Filters_IterativeThreshold.htm
            </summary>
            <param name="image"></param>
            <param name="maxError">pl 0.008</param>
            <returns></returns>
        </member>
        <member name="M:SigStat.Common.Transforms.Binarization.Level(SixLabors.ImageSharp.PixelFormats.Rgba32)">
            <summary>
            Extracts the brightness of the input color. Ranges from 0.0 to 1.0
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.Transforms.BinaryRasterizer">
            <summary>
            Converts standard features to a binary raster.
            <para>Default Pipeline Input: Standard <see cref="T:SigStat.Common.Features"/></para>
            <para>Default Pipeline Output: (bool[,]) Binarized</para>
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.BinaryRasterizer.#ctor(System.Int32,System.Int32,System.Single)">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.BinaryRasterizer"/> class with specified raster size and pen width. </summary>
            <param name="resolutionX">Raster width.</param>
            <param name="resolutionY">Raster height.</param>
            <param name="penWidth"></param>
        </member>
        <member name="M:SigStat.Common.Transforms.BinaryRasterizer.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.HSCPThinning">
            <summary>
            Iteratively thins the input binary raster with the <see cref="T:SigStat.Common.Algorithms.HSCPThinningStep"/> algorithm.
            <para>Pipeline Input type: bool[,]</para>
            <para>Default Pipeline Output: (bool[,]) HSCPThinningResult </para>
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.HSCPThinning.#ctor">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.HSCPThinning"/> class. </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.HSCPThinning.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.ImageGenerator">
            <summary>
            Generates an image feature out of a binary raster.
            Optionally, saves the image to a png file.
            Useful for debugging pipeline steps.
            <para>Pipeline Input type: bool[,]</para>
            <para>Default Pipeline Output: (bool[,]) Input, (Image{Rgba32}) InputImage</para>
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.ImageGenerator.#ctor">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.ImageGenerator"/> class with default settings: skip file writing, Blue ink on white paper. </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.ImageGenerator.#ctor(System.Boolean)">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.ImageGenerator"/> class with default settings. </summary>
            <param name="writeToFile">Whether to save the generated image into a png file.</param>
        </member>
        <member name="M:SigStat.Common.Transforms.ImageGenerator.#ctor(System.Boolean,SixLabors.ImageSharp.PixelFormats.Rgba32,SixLabors.ImageSharp.PixelFormats.Rgba32)">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.ImageGenerator"/> class with specified settings. </summary>
            <param name="writeToFile">Whether to save the generated image into a png file.</param>
            <param name="foregroundColor">Ink color.</param>
            <param name="backgroundColor">Paper color.</param>
        </member>
        <member name="M:SigStat.Common.Transforms.ImageGenerator.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.OnePixelThinning">
            <summary>
            Iteratively thins the input binary raster with the <see cref="T:SigStat.Common.Algorithms.OnePixelThinningStep"/> algorithm.
            <para>Pipeline Input type: bool[,]</para>
            <para>Default Pipeline Output: (bool[,]) OnePixelThinningResult </para>
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.OnePixelThinning.#ctor">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.OnePixelThinning"/> class. </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.OnePixelThinning.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.Transforms.RealisticImageGenerator">
            <summary>
            Generates a realistic looking image of the Signature based on standard features. Uses blue ink and white paper. It does NOT save the image to file.
            <para>Default Pipeline Input: X, Y, Button, Pressure, Azimuth, Altitude <see cref="T:SigStat.Common.Features"/></para>
            <para>Default Pipeline Output: <see cref="F:SigStat.Common.Features.Image"/></para>
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.RealisticImageGenerator.#ctor(System.Int32,System.Int32)">
            <summary> Initializes a new instance of the <see cref="T:SigStat.Common.Transforms.RealisticImageGenerator"/> class with specified settings. </summary>
            <param name="resolutionX">Output image width.</param>
            <param name="resolutionY">Output image height.</param>
        </member>
        <member name="M:SigStat.Common.Transforms.RealisticImageGenerator.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Transforms.RealisticImageGenerator.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Basic linear interpolation
            </summary>
            <param name="t0"></param>
            <param name="t1"></param>
            <param name="t">0.0f to 1.0f</param>
            <returns></returns>
        </member>
        <member name="T:SigStat.Common.Transforms.Trim">
            <summary>
            Trims unnecessary empty space from a binary raster.
            <para>Pipeline Input type: bool[,]</para>
            <para>Default Pipeline Output: (bool[,]) Trimmed</para>
            </summary>
        </member>
        <member name="M:SigStat.Common.Transforms.Trim.#ctor(System.Int32)">
            <param name="framewidth">Leave a border around the trimmed area. framewidth > 0</param>
        </member>
        <member name="M:SigStat.Common.Transforms.Trim.Transform(SigStat.Common.Signature)">
            <inheritdoc/>
        </member>
        <member name="T:SigStat.Common.IClassification">
            <summary>
            Allows implementing a pipeline classifier item capable of logging, progress tracking and IO rewiring.
            </summary>
        </member>
        <member name="M:SigStat.Common.IClassification.Pair(SigStat.Common.Signature,SigStat.Common.Signature)">
            <summary>
            Executes the classification by pairing the parameters.
            This function gets called by the pipeline.
            </summary>
            <param name="signature1">The <see cref="T:SigStat.Common.Signature"/> with a set of features to classify by.</param>
            <param name="signature2">The <see cref="T:SigStat.Common.Signature"/> with a set of features to classify by.</param>
            <returns>Cost between the two signatures</returns>
        </member>
        <member name="T:SigStat.Common.IClassificationMethods">
            <summary>
            Extension methods for <see cref="T:SigStat.Common.IClassification"/> for convenient IO rewiring.
            </summary>
        </member>
        <member name="M:SigStat.Common.IClassificationMethods.Input(SigStat.Common.IClassification,SigStat.Common.FeatureDescriptor[])">
            <summary>
            Sets the InputFeatures in a convenient way.
            </summary>
            <param name="caller"></param>
            <param name="inputFeatures"></param>
            <returns>The caller.</returns>
        </member>
        <member name="M:SigStat.Common.IClassificationMethods.Output(SigStat.Common.IClassification,SigStat.Common.FeatureDescriptor[])">
            <summary>
            Sets the OutputFeatures in a convenient way.
            </summary>
            <param name="caller"></param>
            <param name="outputFeatures"></param>
            <returns>The caller.</returns>
        </member>
        <member name="T:SigStat.Common.Pipeline.IPipelineIO">
            <summary>
            Gives ability to get or set (rewire) a pipeline item's default input and output features.
            </summary>
        </member>
        <member name="P:SigStat.Common.Pipeline.IPipelineIO.InputFeatures">
            <summary>
            List of features to be used as input.
            </summary>
        </member>
        <member name="P:SigStat.Common.Pipeline.IPipelineIO.OutputFeatures">
            <summary>
            List of features to be used as output.
            </summary>
        </member>
        <member name="T:SigStat.Common.Pipeline.ParallelTransformPipeline">
            <summary>
            Runs pipeline items in parallel.
            <para>Default Pipeline Output: Range of all the Item outputs.</para>
            </summary>
        </member>
        <member name="F:SigStat.Common.Pipeline.ParallelTransformPipeline.Items">
            <summary>List of transforms to be run parallel.</summary>
        </member>
        <member name="P:SigStat.Common.Pipeline.ParallelTransformPipeline.Logger">
            <summary>Passes Logger to child items as well.</summary>
        </member>
        <member name="P:SigStat.Common.Pipeline.ParallelTransformPipeline.Progress">
            <summary>Gets the minimum progess of all the child items.</summary>
        </member>
        <member name="M:SigStat.Common.Pipeline.ParallelTransformPipeline.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Pipeline.ParallelTransformPipeline.Add(SigStat.Common.ITransformation)">
            <summary>
            Add new transform to the list. Pass <see cref="P:SigStat.Common.Pipeline.ParallelTransformPipeline.Logger"/> and set up Progress event.
            </summary>
            <param name="newItem"></param>
        </member>
        <member name="M:SigStat.Common.Pipeline.ParallelTransformPipeline.Transform(SigStat.Common.Signature)">
            <summary>
            Executes transform <see cref="F:SigStat.Common.Pipeline.ParallelTransformPipeline.Items"/> parallel.
            Passes input features for each.
            Output is a range of all the Item outputs.
            </summary>
            <param name="signature">Signature to execute transform on.</param>
        </member>
        <member name="T:SigStat.Common.Pipeline.SequentialTransformPipeline">
            <summary>
            Runs pipeline items in a sequence.
            <para>Default Pipeline Output: Output of the last Item in the sequence.</para>
            </summary>
        </member>
        <member name="F:SigStat.Common.Pipeline.SequentialTransformPipeline.Items">
            <summary>List of transforms to be run in sequence.</summary>
        </member>
        <member name="P:SigStat.Common.Pipeline.SequentialTransformPipeline.Logger">
            <summary>Passes Logger to child items as well.</summary>
        </member>
        <member name="M:SigStat.Common.Pipeline.SequentialTransformPipeline.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.Pipeline.SequentialTransformPipeline.Add(SigStat.Common.ITransformation)">
            <summary>
            Add new transform to the list. Pass <see cref="P:SigStat.Common.Pipeline.SequentialTransformPipeline.Logger"/> and set up Progress event.
            </summary>
            <param name="newItem"></param>
        </member>
        <member name="M:SigStat.Common.Pipeline.SequentialTransformPipeline.Transform(SigStat.Common.Signature)">
            <summary>
            Executes transform <see cref="F:SigStat.Common.Pipeline.SequentialTransformPipeline.Items"/> in sequence.
            Passes input features for each.
            Output is the output of the last Item in the sequence.
            </summary>
            <param name="signature">Signature to execute transform on.</param>
        </member>
        <member name="T:SigStat.Common.ITransformation">
            <summary>
            Allows implementing a pipeline transform item capable of logging, progress tracking and IO rewiring.
            </summary>
        </member>
        <member name="M:SigStat.Common.ITransformation.Transform(SigStat.Common.Signature)">
            <summary>
            Executes the transform on the <paramref name="signature"/> parameter.
            This function gets called by the pipeline.
            </summary>
            <param name="signature">The <see cref="T:SigStat.Common.Signature"/> with a set of features to be transformed.</param>
        </member>
        <member name="T:SigStat.Common.ITransformationMethods">
            <summary>
            Extension methods for <see cref="T:SigStat.Common.ITransformation"/> for convenient IO rewiring.
            </summary>
        </member>
        <member name="M:SigStat.Common.ITransformationMethods.Input(SigStat.Common.ITransformation,SigStat.Common.FeatureDescriptor[])">
            <summary>
            Sets the InputFeatures in a convenient way.
            </summary>
            <param name="caller"></param>
            <param name="inputFeatures"></param>
            <returns>The caller.</returns>
        </member>
        <member name="M:SigStat.Common.ITransformationMethods.Output(SigStat.Common.ITransformation,SigStat.Common.FeatureDescriptor[])">
            <summary>
            Sets the OutputFeatures in a convenient way.
            </summary>
            <param name="caller"></param>
            <param name="outputFeatures"></param>
            <returns>The caller.</returns>
        </member>
        <member name="T:SigStat.Common.PipelineBase">
            <summary>
            TODO: Ideiglenes osztaly, C# 8.0 ban ezt atalakitani default implementacios interface be.
            IProgress, ILogger, IPipelineIO default implementacioja.
            </summary>
        </member>
        <member name="P:SigStat.Common.PipelineBase.InputFeatures">
            <inheritdoc/>
        </member>
        <member name="P:SigStat.Common.PipelineBase.OutputFeatures">
            <inheritdoc/>
        </member>
        <member name="P:SigStat.Common.PipelineBase.Logger">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.PipelineBase.Log(SigStat.Common.Helpers.LogLevel,System.String)">
            <summary>
            Enqueues a new log entry to be consumed by the attached <see cref="T:SigStat.Common.Helpers.Logger"/>. Use this when developing new pipeline items.
            </summary>
            <param name="level">Specifies the level of the entry. Higher levels than the <see cref="T:SigStat.Common.Helpers.Logger"/>'s filter level will be ignored.</param>
            <param name="message">The main content of the log entry.</param>
        </member>
        <member name="P:SigStat.Common.PipelineBase.Progress">
            <inheritdoc/>
        </member>
        <member name="E:SigStat.Common.PipelineBase.ProgressChanged">
            <inheritdoc/>
        </member>
        <member name="M:SigStat.Common.PipelineBase.OnProgressChanged(System.Int32)">
            <summary>
            Used to raise base class event in derived classes.
            See explanation: <see href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/events/how-to-raise-base-class-events-in-derived-classes">Event docs link</see>.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Alairas.Common.BaseLineExtraction.GetComponentLowerEnvelopes(SixLabors.ImageSharp.Image{SixLabors.ImageSharp.PixelFormats.Rgba32})">
            <summary>
            Extracts lower envelope for each component
            </summary>
            <param name="bmp"></param>
            <returns></returns>
        </member>
        <member name="M:Alairas.Common.BaseLineExtraction.RemoveOverlapingEnvelopes(System.Collections.Generic.List{System.Collections.Generic.List{System.Drawing.Point}})">
            <summary>
            Eltávolítja az egymás fölött lévő komponensek közül a felsőket, amennyiben az átfedés mértéke legalább 50%
            </summary>
            <param name="envelopes"></param>
            <remarks>Az eltávolított komponensek függhetnek a feldolgozás sorrendjétől, így több, egymást kölcsönösen átfedő komponens esetén előfordulhat, hogy hibás eredményt kapunk.</remarks>
        </member>
        <member name="M:Alairas.Common.BaseLineExtraction.GetLineOfBestFit(System.Collections.Generic.List{System.Drawing.Point})">
            <summary>
            Megkeresi a megadott pontokra legjobban illeszkedő egyenest. Képes még ennek az egyenesnek különböző 
            hibamértékeinek kiszámítására, azonban jelenleg ezzel nem foglalkozom, hiszen ebben a speciális esetben
            szinte biztosan elég jól illeszkedő egyenest kapunk eredményül.
            Az algorimus kimenete nem egy egyenes, hanem egy egy vektor, mely az egyenes egy szakasza. Felteszem,
            hogy a pontok X koordináta szerint rendezettek, így az első és utolsó pont X koordinátája közötti
            szakaszt adom vissza az egyenesből.
            Azaz:
            Paraméterként egy előzőleg megtalált komponenst kap, kimenete pedig az adott komponens alapvonala.
            </summary>
            <param name="points">A pontok, melyre az egyenest illeszteni szeretnénk.</param>
        </member>
        <member name="T:Alairas.Common.SimpleRenderingTransformation">
            <summary>
            Renders an image of the signature based on the available online information (X,Y,Dpi)
            </summary>
        </member>
    </members>
</doc>
